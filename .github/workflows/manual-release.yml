name: Manual Release
# Workflow for manual releases with dry-run capability

on:
  workflow_dispatch:
    inputs:
      version_type:
        type: choice
        description: 'Type of version increment'
        required: true
        default: 'patch'
        options:
          - patch
          - minor
          - major
      release_notes:
        type: string
        description: 'Optional custom release notes (will be added to auto-generated changelog)'
        required: false
      dry_run:
        type: boolean
        description: 'Dry run - validate workflow without publishing'
        required: false
        default: false

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  release:
    name: Manual Release Process
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
      release_created: ${{ steps.release.outputs.release_created }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Calculate new version
        id: version
        run: |
          current_version=$(node -p "require('./package.json').version")
          echo "Current version: $current_version"

          IFS='.' read -ra VERSION_PARTS <<< "$current_version"
          major=${VERSION_PARTS[0]}
          minor=${VERSION_PARTS[1]}
          patch=${VERSION_PARTS[2]}

          case "${{ github.event.inputs.version_type }}" in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
          esac

          new_version="$major.$minor.$patch"
          tag_name="v$new_version"

          echo "New version: $new_version"
          echo "Tag name: $tag_name"

          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

      - name: Generate changelog entry
        id: changelog
        run: |
          current_version="${{ steps.version.outputs.current_version }}"
          new_version="${{ steps.version.outputs.version }}"
          tag_name="${{ steps.version.outputs.tag_name }}"

          # Get the last release tag
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$last_tag" ]; then
            echo "No previous tags found, using all commits"
            commits=$(git log --oneline --pretty=format:"* %s ([%h](https://github.com/${{ github.repository }}/commit/%H))")
          else
            echo "Last tag: $last_tag"
            commits=$(git log $last_tag..HEAD --oneline --pretty=format:"* %s ([%h](https://github.com/${{ github.repository }}/commit/%H))")
          fi

          if [ -z "$commits" ]; then
            commits="* No changes since last release"
          fi

          # Create changelog entry
          changelog_entry="## [$new_version](https://github.com/${{ github.repository }}/compare/v$current_version...$tag_name) ($(date +%Y-%m-%d))

### Changes

$commits"

          # Add custom release notes if provided
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            changelog_entry="$changelog_entry

### Release Notes

${{ github.event.inputs.release_notes }}"
          fi

          echo "Generated changelog entry:"
          echo "$changelog_entry"

          # Save changelog entry to file for later use
          echo "$changelog_entry" > changelog_entry.md

          # Set output for GitHub release
          echo "changelog_entry<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog_entry" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update package.json and package-lock.json
        if: github.event.inputs.dry_run != 'true'
        run: |
          new_version="${{ steps.version.outputs.version }}"

          # Update package.json version
          npm version $new_version --no-git-tag-version

          echo "Updated package.json to version $new_version"

      - name: Update CHANGELOG.md
        if: github.event.inputs.dry_run != 'true'
        run: |
          # Prepend new changelog entry to existing CHANGELOG.md
          if [ -f "CHANGELOG.md" ]; then
            # Create temp file with new entry + existing content
            echo "# Changelog" > temp_changelog.md
            echo "" >> temp_changelog.md
            cat changelog_entry.md >> temp_changelog.md
            echo "" >> temp_changelog.md

            # Add existing content (skip the first "# Changelog" line)
            tail -n +2 CHANGELOG.md >> temp_changelog.md

            # Replace original
            mv temp_changelog.md CHANGELOG.md
          else
            # Create new CHANGELOG.md
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            cat changelog_entry.md >> CHANGELOG.md
          fi

          echo "Updated CHANGELOG.md with new entry"

      - name: Build library
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Commit and tag release
        if: github.event.inputs.dry_run != 'true'
        run: |
          tag_name="${{ steps.version.outputs.tag_name }}"
          new_version="${{ steps.version.outputs.version }}"

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add changes
          git add package.json package-lock.json CHANGELOG.md

          # Commit changes
          git commit -m "chore: release $new_version"

          # Create and push tag
          git tag -a "$tag_name" -m "Release $new_version"
          git push origin main
          git push origin "$tag_name"

          echo "Created and pushed tag: $tag_name"

      - name: Create GitHub Release
        id: release
        if: github.event.inputs.dry_run != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog_entry }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NPM
        if: github.event.inputs.dry_run != 'true'
        run: |
          npm publish --access public
          echo "Published to NPM successfully"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update GitHub Release with NPM info
        if: github.event.inputs.dry_run != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          append_body: true
          body: |

            ## ðŸ“¦ NPM Package

            **Published to NPM:** [@datnguyen1215/hsmjs@${{ steps.version.outputs.version }}](https://www.npmjs.com/package/@datnguyen1215/hsmjs/v/${{ steps.version.outputs.version }})

            Install with:
            ```bash
            npm install @datnguyen1215/hsmjs@${{ steps.version.outputs.version }}
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rollback on failure
        if: failure() && github.event.inputs.dry_run != 'true'
        run: |
          echo "Release failed, attempting rollback..."
          tag_name="${{ steps.version.outputs.tag_name }}"

          # Delete the tag if it was created
          if git tag -l | grep -q "^$tag_name$"; then
            echo "Deleting tag: $tag_name"
            git tag -d "$tag_name" || true
            git push --delete origin "$tag_name" || true
          fi

          # Reset to previous commit if we made one
          if git log --oneline -1 | grep -q "chore: release"; then
            echo "Resetting last commit"
            git reset --hard HEAD~1
            git push --force-with-lease origin main || true
          fi

          echo "Rollback completed"
          exit 1

      - name: Dry run summary
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "ðŸ§ª DRY RUN COMPLETED SUCCESSFULLY"
          echo ""
          echo "ðŸ“Š Summary:"
          echo "  â€¢ Current version: ${{ steps.version.outputs.current_version }}"
          echo "  â€¢ New version: ${{ steps.version.outputs.version }}"
          echo "  â€¢ Tag name: ${{ steps.version.outputs.tag_name }}"
          echo "  â€¢ Version type: ${{ github.event.inputs.version_type }}"
          echo ""
          echo "âœ… All validations passed:"
          echo "  â€¢ Dependencies installed successfully"
          echo "  â€¢ Build completed without errors"
          echo "  â€¢ All tests passed"
          echo "  â€¢ Changelog generated successfully"
          echo ""
          echo "ðŸš€ Ready for actual release!"
          echo "Run this workflow again with 'Dry run' unchecked to publish."