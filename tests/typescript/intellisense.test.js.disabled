/**
 * TypeScript IntelliSense and Type Validation Test
 * 
 * Note: This test is written in TypeScript syntax but may need to be compiled
 * or run with ts-node depending on the project setup. Since the project doesn't
 * currently include TypeScript definitions, this serves as a specification
 * for what TypeScript support should look like.
 */

// Import declarations that would be expected with TypeScript support
// These imports will fail until .d.ts files are created
import { createMachine, action } from '../../dist/es/index.js';

// Type definitions that should be provided (specification)
interface MachineContext {
  [key: string]: any;
}

interface Event {
  type: string;
  [key: string]: any;
}

interface ActionFunction<TContext = MachineContext, TEvent = Event> {
  (context: TContext, event: TEvent): void | Promise<void>;
}

interface NamedAction<TContext = MachineContext, TEvent = Event> {
  actionName: string;
  actionFn: ActionFunction<TContext, TEvent>;
}

interface State {
  name: string;
  on(event: string, targetState: State, action?: NamedAction): void;
  entry(action: NamedAction): void;
  exit(action: NamedAction): void;
}

interface MachineInstance<TContext = MachineContext> {
  current: string;
  context: TContext;
  send(event: string, data?: any): Promise<void>;
  stop(): void;
}

interface Machine {
  name: string;
  state(name: string): State;
  initial(state: State): void;
  start<TContext = MachineContext>(initialContext?: TContext): MachineInstance<TContext>;
}

// Test TypeScript intellisense and type checking
describe('TypeScript IntelliSense Tests', () => {
  test('createMachine provides type hints', () => {
    // This should provide intellisense for machine methods
    const machine = createMachine('test');
    
    // TypeScript should know about these methods
    expect(typeof machine.name).toBe('string');
    expect(typeof machine.state).toBe('function');
    expect(typeof machine.initial).toBe('function');
    expect(typeof machine.start).toBe('function');
  });

  test('state objects provide type hints', () => {
    const machine = createMachine('test');
    const idle = machine.state('idle');
    
    // TypeScript should know about state methods
    expect(typeof idle.on).toBe('function');
    // Note: entry/exit methods would need to be added to the library
    // expect(typeof idle.entry).toBe('function');
    // expect(typeof idle.exit).toBe('function');
  });

  test('action function provides type hints', () => {
    // This should provide intellisense for action parameters
    const testAction = action('test', (context, event) => {
      // TypeScript should infer types for context and event
      // context should be typed as MachineContext
      // event should be typed as Event
      context.tested = true;
      
      // Should have intellisense for event properties
      if (event.type) {
        context.eventType = event.type;
      }
    });
    
    expect(testAction.actionName).toBe('test');
    expect(typeof testAction.actionFn).toBe('function');
  });

  test('machine instance provides typed context', () => {
    interface TestContext {
      counter: number;
      message: string;
      completed: boolean;
    }

    const machine = createMachine('counter');
    const initial = machine.state('initial');
    machine.initial(initial);
    
    // Should be able to provide typed initial context
    const instance = machine.start<TestContext>({ 
      counter: 0, 
      message: 'Hello', 
      completed: false 
    });
    
    // TypeScript should provide intellisense for context properties
    expect(instance.context.counter).toBe(0);
    expect(instance.context.message).toBe('Hello');
    expect(instance.context.completed).toBe(false);
  });

  test('strongly typed workflow', async () => {
    interface UserContext {
      userId?: string;
      userName?: string;
      isLoggedIn: boolean;
      loginAttempts: number;
    }

    interface LoginEvent {
      type: 'LOGIN';
      username: string;
      password: string;
    }

    interface LogoutEvent {
      type: 'LOGOUT';
    }

    type UserEvent = LoginEvent | LogoutEvent;

    const userMachine = createMachine('user');
    
    // Actions with strong typing
    const loginAction = action('login', (context: UserContext, event: LoginEvent) => {
      context.userName = event.username;
      context.isLoggedIn = true;
      context.loginAttempts++;
    });

    const logoutAction = action('logout', (context: UserContext, event: LogoutEvent) => {
      context.userName = undefined;
      context.isLoggedIn = false;
    });

    // States
    const loggedOut = userMachine.state('loggedOut');
    const loggedIn = userMachine.state('loggedIn');

    // Transitions
    loggedOut.on('LOGIN', loggedIn, loginAction);
    loggedIn.on('LOGOUT', loggedOut, logoutAction);
    
    userMachine.initial(loggedOut);

    // Start with typed context
    const instance = userMachine.start<UserContext>({
      isLoggedIn: false,
      loginAttempts: 0
    });

    // TypeScript should provide intellisense and type checking
    expect(instance.context.isLoggedIn).toBe(false);
    expect(instance.context.loginAttempts).toBe(0);

    // Send typed events
    await instance.send('LOGIN', { 
      username: 'testuser', 
      password: 'password123' 
    });

    expect(instance.current).toBe('loggedIn');
    expect(instance.context.isLoggedIn).toBe(true);
    expect(instance.context.userName).toBe('testuser');
    expect(instance.context.loginAttempts).toBe(1);
  });

  test('generic action types', () => {
    interface CounterContext {
      count: number;
    }

    interface IncrementEvent {
      type: 'INCREMENT';
      amount: number;
    }

    // Action with specific generic types
    const incrementAction = action<CounterContext, IncrementEvent>(
      'increment', 
      (context, event) => {
        // TypeScript should know context.count is a number
        // TypeScript should know event.amount is a number
        context.count += event.amount;
      }
    );

    expect(incrementAction.actionName).toBe('increment');
    expect(typeof incrementAction.actionFn).toBe('function');
  });

  test('intellisense for method chaining', () => {
    const machine = createMachine('chaining');
    
    // Should provide intellisense for chained method calls
    const idle = machine
      .state('idle');
    
    const active = machine
      .state('active');
      
    // Method chaining should work with intellisense
    idle.on('START', active);
    
    machine.initial(idle);

    const instance = machine.start();
    
    expect(instance.current).toBe('idle');
  });

  test('error handling types', async () => {
    interface ErrorContext {
      error?: string;
      retryCount: number;
    }

    const errorMachine = createMachine('error-handling');
    
    const working = errorMachine.state('working');
    const failed = errorMachine.state('failed');
    const retrying = errorMachine.state('retrying');

    const errorAction = action<ErrorContext>('handleError', (context, event) => {
      context.error = event.message || 'Unknown error';
      context.retryCount++;
    });

    working.on('ERROR', failed, errorAction);
    failed.on('RETRY', retrying);
    retrying.on('SUCCESS', working);
    
    errorMachine.initial(working);

    const instance = errorMachine.start<ErrorContext>({ retryCount: 0 });

    await instance.send('ERROR', { message: 'Network timeout' });
    
    expect(instance.current).toBe('failed');
    expect(instance.context.error).toBe('Network timeout');
    expect(instance.context.retryCount).toBe(1);
  });

  test('compile-time type checking', () => {
    // These tests would only work with actual TypeScript compilation
    // They represent what should fail at compile time with proper types
    
    const machine = createMachine('type-check');
    const state1 = machine.state('state1');
    
    // This should work
    expect(() => {
      state1.on('EVENT', state1);
    }).not.toThrow();

    // These should fail at compile time with proper TypeScript definitions:
    // machine.invalidMethod(); // Should show TypeScript error
    // state1.invalidMethod(); // Should show TypeScript error
    // instance.send(123); // Should show TypeScript error (event should be string)
  });
});

// Export type definitions for documentation purposes
export type {
  MachineContext,
  Event,
  ActionFunction,
  NamedAction,
  State,
  MachineInstance,
  Machine
};